.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Netlist::Subclass 3pm"
.TH Netlist::Subclass 3pm "2015-03-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Verilog::Netlist::Subclass \- Common routines for all classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package Verilog::Netlist::Something;
\&  use Verilog::Netlist::Subclass;
\&  use base qw(Verilog::Netlist::Subclass);
\&
\&  ...
\&
\&  $self\->info("We\*(Aqre here\en");
\&  $self\->warn("Things look bad\en");
\&  $self\->error("Things are even worse\en");
\&  $self\->exit_if_error();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Verilog::Netlist::Subclass is used as a base class for all
Verilog::Netlist::* structures.  It is mainly used so that \f(CW$self\fR\->\fIwarn()\fR
and \f(CW$self\fR\->\fIerror()\fR will produce consistent results.
.SH "MEMBER FUNCTIONS"
.IX Header "MEMBER FUNCTIONS"
.ie n .IP "$self\->error (\fIText...\fR)" 4
.el .IP "\f(CW$self\fR\->error (\fIText...\fR)" 4
.IX Item "$self->error (Text...)"
Print an error in a standard format.
.ie n .IP "$self\->\fIerrors()\fR" 4
.el .IP "\f(CW$self\fR\->\fIerrors()\fR" 4
.IX Item "$self->errors()"
Return number of errors detected.
.ie n .IP "$self\->\fIexit_if_error()\fR" 4
.el .IP "\f(CW$self\fR\->\fIexit_if_error()\fR" 4
.IX Item "$self->exit_if_error()"
Exits the program if any errors were detected.
.ie n .IP "$self\->\fIfilename()\fR" 4
.el .IP "\f(CW$self\fR\->\fIfilename()\fR" 4
.IX Item "$self->filename()"
The filename number the entity was created in.
.ie n .IP "$self\->info (\fIText...\fR)" 4
.el .IP "\f(CW$self\fR\->info (\fIText...\fR)" 4
.IX Item "$self->info (Text...)"
Print a informational in a standard format.
.ie n .IP "$self\->\fIlineno()\fR" 4
.el .IP "\f(CW$self\fR\->\fIlineno()\fR" 4
.IX Item "$self->lineno()"
The line number the entity was created on.
.ie n .IP "$self\->\fIlogger()\fR" 4
.el .IP "\f(CW$self\fR\->\fIlogger()\fR" 4
.IX Item "$self->logger()"
The class to report errors using, generally a Verilog::Netlist::Logger
object.
.ie n .IP "$self\->userdata (\fIkey\fR) =item $self\->userdata (\fIkey\fR, \fIdata\fR)" 4
.el .IP "\f(CW$self\fR\->userdata (\fIkey\fR) =item \f(CW$self\fR\->userdata (\fIkey\fR, \fIdata\fR)" 4
.IX Item "$self->userdata (key) =item $self->userdata (key, data)"
Sets (with two arguments) or retrieves the specified key from an opaque
hash.  This may be used to store application data on the specified node.
.ie n .IP "$self\->warn (\fIText...\fR)" 4
.el .IP "\f(CW$self\fR\->warn (\fIText...\fR)" 4
.IX Item "$self->warn (Text...)"
Print a warning in a standard format.
.ie n .IP "$self\->\fIwarnings()\fR" 4
.el .IP "\f(CW$self\fR\->\fIwarnings()\fR" 4
.IX Item "$self->warnings()"
Return number of warnings detected.
.SH "DISTRIBUTION"
.IX Header "DISTRIBUTION"
Verilog-Perl is part of the <http://www.veripool.org/> free Verilog \s-1EDA\s0
software tool suite.  The latest version is available from \s-1CPAN\s0 and from
<http://www.veripool.org/verilog\-perl>.
.PP
Copyright 2000\-2015 by Wilson Snyder.  This package is free software; you
can redistribute it and/or modify it under the terms of either the \s-1GNU\s0
Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.
.SH "AUTHORS"
.IX Header "AUTHORS"
Wilson Snyder <wsnyder@wsnyder.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Verilog-Perl,
Verilog::Netlist
