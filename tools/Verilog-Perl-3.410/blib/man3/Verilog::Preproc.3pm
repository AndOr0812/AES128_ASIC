.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Preproc 3pm"
.TH Preproc 3pm "2015-03-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Verilog::Preproc \- Preprocess Verilog files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Verilog::Getopt;
\&
\&    my $vp = Verilog::Preproc\->new(I<parameters>);
\&    $vp\->open(filename=>"verilog_file.v");
\&    my $line = $vp\->getline();
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 4
\&    # This is a complete verilog pre\-parser!
\&    # For a command line version, see vppreproc
\&    use Verilog::Getopt;
\&    use Verilog::Preproc;
\&
\&    my $opt = new Verilog::Getopt;
\&    @ARGV = $opt\->parameter(@ARGV);
\&
\&    my $vp = Verilog::Preproc\->new(options=>$opt,);
\&    $vp\->open(filename=>"verilog_file.v");
\&    while (defined (my $line = $vp\->getline())) {
\&       print $line;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Verilog::Preproc reads Verilog files, and preprocesses them according to
the SystemVerilog 2009 (1800\-2009) specification.  Programs can be easily
converted from reading a IO::File into reading preprocessed output from
Verilog::Preproc.
.PP
See the \*(L"Which Package\*(R" section of Verilog-Perl if you are unsure which
parsing package to use for a new application.
.SH "MEMBER FUNCTIONS"
.IX Header "MEMBER FUNCTIONS"
.ie n .IP "$self\->\fIeof()\fR" 4
.el .IP "\f(CW$self\fR\->\fIeof()\fR" 4
.IX Item "$self->eof()"
Returns true at the end of the file.
.ie n .IP "$self\->\fIfilename()\fR" 4
.el .IP "\f(CW$self\fR\->\fIfilename()\fR" 4
.IX Item "$self->filename()"
Returns the filename of the most recently returned \fIgetline()\fR.  May not match
the filename passed on the command line, as `line directives are honored.
.ie n .IP "$self\->\fIgetall()\fR" 4
.el .IP "\f(CW$self\fR\->\fIgetall()\fR" 4
.IX Item "$self->getall()"
Return the entire translated text up to the final \s-1EOF,\s0 similar to calling
join('',$self\->getline) but significantly faster.  With optional argument,
returns approximately that number of characters.  Returns undef at \s-1EOF.\s0
.ie n .IP "$self\->\fIgetline()\fR" 4
.el .IP "\f(CW$self\fR\->\fIgetline()\fR" 4
.IX Item "$self->getline()"
Return the next line of text.  Returns undef at \s-1EOF.  \s0(Just like
IO::File\->\fIgetline()\fR.)
.ie n .IP "$self\->\fIlineno()\fR" 4
.el .IP "\f(CW$self\fR\->\fIlineno()\fR" 4
.IX Item "$self->lineno()"
Returns the line number of the last \fIgetline()\fR.  Note that the line number
may change several times between \fIgetline()\fR, for example when traversing
multiple include files.
.ie n .IP "$self\->\fIparent()\fR" 4
.el .IP "\f(CW$self\fR\->\fIparent()\fR" 4
.IX Item "$self->parent()"
Returns a reference to the Verilog::Netlist::File which created this
object, if any.
.ie n .IP "$self\->new(\fIparameters\fR)" 4
.el .IP "\f(CW$self\fR\->new(\fIparameters\fR)" 4
.IX Item "$self->new(parameters)"
Creates a new preprocessor.  See the \s-1PARAMETERS\s0 section for the options
that may be passed to new.
.ie n .IP "$self\->open(filename=>\fIfilename\fR)" 4
.el .IP "\f(CW$self\fR\->open(filename=>\fIfilename\fR)" 4
.IX Item "$self->open(filename=>filename)"
Opens the specified file.  If filename ends in .gz, decompress while
reading.  If called before a file is completely parsed, the new file will
be parsed completely before returning to the previously open file.  (As if
it was an include file.)
.Sp
Open may also be called without named parameters, in which case the only
argument is the filename.
.ie n .IP "$self\->unreadback(\fItext\fR)" 4
.el .IP "\f(CW$self\fR\->unreadback(\fItext\fR)" 4
.IX Item "$self->unreadback(text)"
Insert text into the input stream at the given point.  The text will not
be parsed, just returned to the application.  This lets \fIcomment()\fR callbacks
insert special code into the output stream.
.SH "PARAMETERS"
.IX Header "PARAMETERS"
The following named parameters may be passed to the new constructor.
.IP "ieee_predefines=>0" 4
.IX Item "ieee_predefines=>0"
With ieee_predefines false, disable defining \s-1SV_COV_START\s0 and other \s-1IEEE\s0
mandated definitions.
.IP "include_open_nonfatal=>1" 4
.IX Item "include_open_nonfatal=>1"
With include_open_nonfatal set to one, ignore any include files that do
not exist.
.IP "keep_comments=>0" 4
.IX Item "keep_comments=>0"
With keep_comments set to zero, strip all comments.  When set to one (the
default), insert comments in output streams.  When set to 'sub', call the
\&\fIcomment()\fR function so that meta-comments can be processed outside of the
output stream.  Note that some programs use meta-comments to embed useful
information (synthesis and lint), so strip with caution if feeding to tools
other than your own.  Defaults to 1.
.IP "keep_whitespace=>0" 4
.IX Item "keep_whitespace=>0"
With keep_whitespace set to zero, compress all whitespace to a single space
or newline.  When set to one (the default), retain whitespace.  Defaults to
1.
.IP "line_directives=>0" 4
.IX Item "line_directives=>0"
With line_directives set to zero, suppress \*(L"`line\*(R" comments which indicate
filename and line number changes.  Use the \fIlineno()\fR and \fIfilename()\fR methods
instead to retrieve this information. Defaults true.
.IP "options=>Verilog::Getopt object" 4
.IX Item "options=>Verilog::Getopt object"
Specifies the object to be used for resolving filenames and defines.  Other
classes may be used, as long as their interface matches that of Getopt.
.IP "pedantic=>1" 4
.IX Item "pedantic=>1"
With pedantic set, rigorously obey the Verilog pedantic.  This used to
disable the `_\|_FILE_\|_ and `_\|_LINE_\|_ features but no longer does as they
were added to the 1800\-2009 standard.  It remains to disable `error and may
disable other future features that are not specified in the language
standard. Defaults false.
.IP "synthesis=>1" 4
.IX Item "synthesis=>1"
With synthesis set, define \s-1SYNTHESIS,\s0 and ignore text bewteen \*(L"ambit\*(R",
\&\*(L"pragma\*(R", \*(L"synopsys\*(R" or \*(L"synthesis\*(R" translate_off and translate_on meta
comments.  Note using metacomments is discouraged as they have led to
silicon bugs (versus ifdef \s-1SYNTHESIS\s0); see
<http://www.veripool.org/papers/TenIPEdits_SNUGBos07_paper.pdf>.
.SH "CALLBACKS"
.IX Header "CALLBACKS"
Default callbacks are implemented that are suitable for most applications.
Derived classes may override these callbacks as needed.
.ie n .IP "$self\->comment(\fIcomment\fR)" 4
.el .IP "\f(CW$self\fR\->comment(\fIcomment\fR)" 4
.IX Item "$self->comment(comment)"
Called with each comment, when keep_comments=>'sub' is used.  Defaults to
do nothing.
.ie n .IP "$self\->undef(\fIdefname\fR)" 4
.el .IP "\f(CW$self\fR\->undef(\fIdefname\fR)" 4
.IX Item "$self->undef(defname)"
Called with each `undef.  Defaults to use options object.
.ie n .IP "$self\->\fIundefineall()\fR" 4
.el .IP "\f(CW$self\fR\->\fIundefineall()\fR" 4
.IX Item "$self->undefineall()"
Called with each `undefineall.  Defaults to use options object.
.ie n .IP "$self\->define(\fIdefname\fR, \fIvalue\fR, \fIparams\fR)" 4
.el .IP "\f(CW$self\fR\->define(\fIdefname\fR, \fIvalue\fR, \fIparams\fR)" 4
.IX Item "$self->define(defname, value, params)"
Called with each `define.  Defaults to use options object.
.ie n .IP "$self\->def_exists(\fIdefname\fR)" 4
.el .IP "\f(CW$self\fR\->def_exists(\fIdefname\fR)" 4
.IX Item "$self->def_exists(defname)"
Called to determine if the define exists.  Return true if the define
exists, or argument list with leading parenthesis if the define has
arguments.  Defaults to use options object.
.ie n .IP "$self\->def_substitute(\fIstring\fR)" 4
.el .IP "\f(CW$self\fR\->def_substitute(\fIstring\fR)" 4
.IX Item "$self->def_substitute(string)"
Called to determine what string to insert for a define substitution.
Called with the value of the define after parameters have been expanded
computed per the SystemVerilog spec.  Generally this function would just
return the same string as it is passed, but this can be overridden to allow
customized preprocessing.
.ie n .IP "$self\->def_value(\fIdefname\fR)" 4
.el .IP "\f(CW$self\fR\->def_value(\fIdefname\fR)" 4
.IX Item "$self->def_value(defname)"
Called to return value to substitute for specified define.  Defaults to use
options object.
.ie n .IP "$self\->error(\fImessage\fR)" 4
.el .IP "\f(CW$self\fR\->error(\fImessage\fR)" 4
.IX Item "$self->error(message)"
Called on errors, with the error message as an argument.  Defaults
to die.
.ie n .IP "$self\->include(\fIfilename\fR)" 4
.el .IP "\f(CW$self\fR\->include(\fIfilename\fR)" 4
.IX Item "$self->include(filename)"
Specifies a include file has been found.  Defaults to call \f(CW$self\fR\->open
after resolving the filename with the options parameter.
.SH "COMPLIANCE"
.IX Header "COMPLIANCE"
The preprocessor supports the constructs defined in the SystemVerilog 2012
standard (\s-1IEEE 1800\-2012\s0), which is a superset of Verilog 1995 (\s-1IEEE
1364\-1995\s0), Verilog 2001 (\s-1IEEE 1364\-2001\s0), Verilog 2005 (\s-1IEEE 1364\-2005\s0)
and SystemVerilog 2005 (\s-1IEEE 1800\-2005\s0), and SystemVerilog 2009 (\s-1IEEE
1800\-2009\s0).
.PP
Verilog::Preproc adds the `error macro (unless the pedantic parameter is
set.):
.IP "`_\|_FILE_\|_" 4
.IX Item "`__FILE__"
The _\|_FILE_\|_ define expands to the current filename as a string, like \*(C+'s
_\|_FILE_\|_.  This was incorporated into to the 1800\-2009 standard (but
supported by Verilog-Perl since 2004!)
.IP "`_\|_LINE_\|_" 4
.IX Item "`__LINE__"
The _\|_LINE_\|_ define expands to the current filename as a string, like \*(C+'s
_\|_LINE_\|_.  This was incorporated into to the 1800\-2009 standard (but
supported by Verilog-Perl since 2004!)
.ie n .IP "`error \fI""string""\fR" 4
.el .IP "`error \fI``string''\fR" 4
.IX Item "`error string"
`error will be reported whenever it is encountered. (Like \*(C+ #error.)
.Sp
These are useful for error macros, similar to \fIassert()\fR in \*(C+.
.SH "DISTRIBUTION"
.IX Header "DISTRIBUTION"
Verilog-Perl is part of the <http://www.veripool.org/> free Verilog \s-1EDA\s0
software tool suite.  The latest version is available from \s-1CPAN\s0 and from
<http://www.veripool.org/verilog\-perl>.
.PP
Copyright 2000\-2015 by Wilson Snyder.  This package is free software; you
can redistribute it and/or modify it under the terms of either the \s-1GNU\s0
Lesser General Public License Version 3 or the Perl Artistic License Version 2.0.
.SH "AUTHORS"
.IX Header "AUTHORS"
Wilson Snyder <wsnyder@wsnyder.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Verilog-Perl,
Verilog::Language, Verilog::Getopt
.PP
IO::File
.PP
This package is layered on a \*(C+ interface which may be found in the kit.
